################################################################################
# Library creation makefile
# !!!source folder should be located in ./src (without subfolders)
#    all c++ files should have extension .cpp
#    all c files should have extension .c
# generated executable name will be <folder_name>
# generated library will be located in ./build/exe
################################################################################

include $(TOPDIR)/env/make/user_cfg

EXEC      = ./build/exe/$(notdir $(CURDIR))
CCSOURCES = $(wildcard ./src/*.cpp)
CSOURCES  = $(wildcard ./src/*.c)

OBJECTS   = $(addprefix ./build/, $(CCSOURCES:./src/%.cpp=%.o))
OBJECTS  += $(addprefix ./build/, $(CSOURCES:./src/%.c=%.o))
INCFLAGS  = $(addprefix -I$(TOPDIR)/, $(addsuffix /build/inc, $(DEPLIBS)))
LIBFLAGS  = $(addprefix -L$(TOPDIR)/, $(addsuffix /build/lib, $(DEPLIBS)))
LIBFLAGS += $(addprefix -l, $(DEPLIBS))
LIBFLAGS += $(addprefix -l, $(SYSLIBS))

default: all

help:
	@echo "Executable creator"
	@echo "  Available targets:"
	@echo "    build      build application (./build/exe)"
	@echo "    builddep   build all dependent libraries"
	@echo "    run        run executable"
	@echo "    clean      remove all generated items, but not depended libraries"
	@echo "    cleanall   remove all generated items, and all depended libraries"
	@echo "    help       this information"
	@echo "    all        default target, the same as build"
	@echo "  Used variables:"
	@echo "    TOPDIR       path to root folder, where env is located"
	@echo "    CCFLAGS_USER user c++ compiler flags"
	@echo "    CFLAGS_USER  c compiler flags"
	@echo "    LDFLAGS_USER c++ linker flags"
	@echo "    DEPLIBS      depended libraries folders"
	@echo "    SYSLIBS      linked system libraries (ex: pthread, rt,...)"	
	@echo "  Tips:"
	@echo "    All sources should be located in ./src folder (no subfolders)"
	@echo "    c++ sources should have extension .cpp"
	@echo "    c sources should have extension .c"
	@echo "    depended libraries should be generated by the same envirounment"
	@echo "    generated executable name will be <Dir_Name>"
	@echo "    default c++ compiler flags: -Wall -fmessage-length=0"
	@echo "    default c compiler flags: -Wall -fmessage-length=0"
	@echo "    default c++ linker flags: none"

clean:
	@echo cleaning: $(notdir $(CURDIR))
	@rm -r -f ./build

cleanall: clean
	@for SUBDIR in $(DEPLIBS) ; do make --no-print-directory -C $(TOPDIR)/$$SUBDIR clean; done

all: build

build: builddep $(EXEC)

run: build
	@echo running: $(notdir $(CURDIR))
	@$(EXEC)
 
$(EXEC): $(OBJECTS)
	@echo linking: $(notdir $(CURDIR))
	@mkdir -p $(dir $@)
	@g++ $(LDFLAGS_USER) $< -o $@ $(LIBFLAGS)

./build/%.o: ./src/%.cpp
	@echo c++ building: $(notdir $(CURDIR)) - $<
	@mkdir -p $(dir $@)
	@g++ -Wall -fmessage-length=0 $(CCFLAGS_USER) $(INCFLAGS) -c $< -o $@

./build/%.o: ./src/%.c
	@echo c building: $(notdir $(CURDIR)) - $<
	@mkdir -p $(dir $@)
	@gcc -Wall -fmessage-length=0 $(CFLAGS_USER) $(INCFLAGS) -c $< -o $@

builddep:
	@for SUBDIR in $(DEPLIBS) ; do make --no-print-directory -C $(TOPDIR)/$$SUBDIR; done
